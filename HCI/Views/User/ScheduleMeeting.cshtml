@model HCI.Models.ScheduleMeetingModel

@{
    ViewBag.Title = "Schedule Meeting";
}

<h2>Schedule Meeting</h2>

@section css
{
    @Styles.Render("~/Content/bootstrap-datepicker")
    @Styles.Render("~/Content/bootstrap-clockpicker")
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap-datepicker")
    @Scripts.Render("~/bundles/bootstrap-clockpicker")
    <script type="text/javascript">


        var editRepeat = false;
        var modalOKclick = false;
        var modalCancelclick = false;

        function getNowTime()
        {
            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            
            if (hour < 10)
            {
                hour = '0' + hour;
            }

            if (min < 10)
            {
                min = '0' + min;
            }

            return hour + ':' + min;
        }

        function setModalError(id ,msg)
        {
            var msgDiv = $('#' + id);

            msgDiv.text(msg);
        }
        function removeRepeatsOnError()
        {
            $('#repeatsOnGroup').removeClass('has-error');
            $('#modalWeeklyRepeatsErrorMsg').text("");
            $('#modalMonthlyRepeatsErrorMsg').text("");
        }

        function removeEndsOnDateError() {
            $('#endsOnDateGroup').removeClass('has-error');
            $('#modalEndsOnErrorMsg').text("");
        }

        function validateModal(displayErr, displaySummary)
        {
            $('#modalSummary').text('');

            var error = false;
            var intervalType = $('#repeatingType').children(':selected').prop('value');
            var occurDays = '';
            var firstDay = true;
            var neverEnds = $('#endsOnNeverRadio').prop('checked');
            var startDate = $('#startsOnText').prop('value');
            var endDate = '';

            if (intervalType == 'Weekly') {
                if ($('#sunCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Sun';
                }

                if ($('#monCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Mon';
                }

                if ($('#tueCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Tue';
                }

                if ($('#wedCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Wed';
                }

                if ($('#thuCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Thu';
                }

                if ($('#friCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Fri';
                }

                if ($('#satCheck').prop('checked')) {
                    if (firstDay) {
                        firstDay = false;
                    }
                    else {
                        occurDays += ',';
                    }
                    occurDays += 'Sat';
                }
            }
            else if (intervalType == 'Monthly') {
                occurDays = $('#monthlyRepeatsOnText').prop('value');
            }

            if (intervalType != 'Daily' && typeof occurDays != 'undefined' && occurDays != '') {
                if (intervalType == 'Monthly') {
                    var monthlyDaysPatt = /^((0?[1-9])|[1-2][0-9]|(30)|(31))(,((0?[1-9])|[1-2][0-9]|(30)|(31)))*$/;
                    if (!monthlyDaysPatt.test(occurDays)) {
                        error = true;
                        if (displayErr) {
                            $('#repeatsOnGroup').addClass('has-error');
                            setModalError('modalMonthlyRepeatsErrorMsg', 'Only numbers between 01 and 31 and commas are valid.');
                        }
                    }
                }
            }
            else if (intervalType != 'Daily') {
                error = true;
                if (displayErr) {
                    $('#repeatsOnGroup').addClass('has-error');
                    if (intervalType == 'Weekly') {
                        setModalError('modalWeeklyRepeatsErrorMsg', '"Repeats on" field is required.');
                    } else if (intervalType == 'Monthly') {
                        setModalError('modalMonthlyRepeatsErrorMsg', '"Repeats on" field is required.');
                    }
                }
            }



            if (!neverEnds) {
                endDate = $('#endsOnDateText').prop('value');

                if (typeof endDate == 'undefined' || endDate == '') {
                    error = true;
                    if (displayErr) {
                        $('#endsOnDateGroup').addClass('has-error');
                        setModalError('modalEndsOnErrorMsg', '"Ends on" field is required.');
                    }
                }
                else {
                    if (startDate > endDate) {
                        error = true;
                        if (displayErr) {
                            $('#endsOnDateGroup').addClass('has-error');
                            setModalError('modalEndsOnErrorMsg', '"Ends on" field should not be earlier than "Starts on"');
                        }
                    }
                }
            }

            if (!error)
            {
                if (displaySummary) {
                    var summaryMsg = '';
                    summaryMsg = intervalType;

                    if (intervalType == 'Weekly') {
                        summaryMsg += ' on ' + occurDays;
                    }
                    else if (intervalType == 'Monthly') {
                        summaryMsg += ' on day ' + occurDays;
                    }

                    if (!neverEnds) {
                        summaryMsg += " until " + endDate;
                    }

                    $('#modalSummary').text('Summary: ' + summaryMsg);
                }

                $('#NeverEnd').prop('value', neverEnds);
                $('#OccurDays').prop('value', occurDays);
                $('#IntervalType').prop('value', intervalType);
                $('#EndDateForCycle').prop('value', endDate);
            }

            return { error: error, summary: summaryMsg };
        }

        function getLocation()
        {
            var isRepeat = $('#Repeats').prop('checked');
            var startDate, endDate, startTime, endTime, intervalType, occurDays, neverEnds;
            var locationID = $('#LocationID');

            occurDays = '';
            intervalType = 'OneDay';
            startDate = $('#StartDate').prop('value');
            endDate = $('#EndDate').prop('value');
            startTime = $('#StartTime').prop('value');
            endTime = $('#EndTime').prop('value');

            if (isRepeat)
            {
                intervalType = $('#IntervalType').prop('value');
                occurDays = $('#OccurDays').prop('value');
                neverEnds = $('#NeverEnd').prop('value');
                endDate = endDate$('#EndDateForCycle').prop('value');
            }


            $.ajax({
                url: '/HCI/api/AvailableLocation?' + 'startDate=' + startDate + '&endDate=' + endDate + '&startTime=' + startTime + '&endTime=' + endTime + '&intervalType=' + intervalType + '&occurDays=' + occurDays + '&neverEnds=' + neverEnds,
                dataType: 'json',

                success: function (data) {
                    
                    locationID.empty();
                    for (i = 0; i < data.length; i++) {
                        $("<option>").prop('value', data[i].ID).text(data[i].Name).appendTo(locationID);
                    }
                }
            });

            if (locationID.children("option").length == 0) {
                $('<option value="-1" selected>No Available Room</option>').appendTo(locationID);
            }
        }

        $(document).ready(function ($) {
            $(function () {
                $('#Title').focus();
            })
        });

        $(document).ready(function ($) {
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
        });

        $(document).ready(function ($) {
            $(function () {
                $('.clockpicker').clockpicker({
                    autoclose: true,
                });

                $('#StartTime').prop('value', getNowTime());

                $('#StartDate').datepicker({
                    format: "yyyy-mm-dd",
                    weekStart: 0,
                    todayBtn: "linked",
                    forceParse: false,
                    autoclose: true,
                    todayHighlight: true
                });

                $('#EndDate').datepicker({
                    format: "yyyy-mm-dd",
                    weekStart: 0,
                    todayBtn: "linked",
                    forceParse: false,
                    autoclose: true,
                    todayHighlight: true
                });

                $('#endsOnDateText').datepicker({
                    format: "yyyy-mm-dd",
                    weekStart: 0,
                    todayBtn: "linked",
                    forceParse: false,
                    autoclose: true,
                    todayHighlight: true
                });
            }
            )
        });

        $(document).ready(function ($) {
                $(function () {
                    $('#Repeat').change(function (event) {
                        editRepeat = false;

                        if (this.checked) {
                            var startDate = $('#StartDate').prop('value');
                            $('#startsOnText').prop('value', startDate);
                            $('#RepeatSetup').modal('show');
                            $("#repeatText").prop('hidden', false);
                        }
                        else {
                            $("#repeatText").prop('hidden',true);
                        }
                    });

                    $('#repeatEdit').click(function (event) {
                            editRepeat = true;
                            var startDate = $('#StartDate').prop('value');
                            $('#startsOnText').prop('value', startDate);
                            $('#RepeatSetup').modal('show');
                    });

                    $('#endsOnDateRadio').change(function (event) {
                        removeEndsOnDateError();
                        if (this.checked) {
                            $('#endsOnDateText').prop('disabled', false)
                        }
                        else {
                            $('#endsOnDateText').prop('disabled', true)
                        }
                        validateModal(true, true);
                    });

                    $('#endsOnNeverRadio').change(function (event) {
                        removeEndsOnDateError();
                        if (this.checked) {
                            $('#endsOnDateText').prop('disabled', true)
                        }
                        else {
                            $('#endsOnDateText').prop('disabled', false)
                        }
                        validateModal(true, true);
                    });

                    $('#endsOnDateText').change(function (event) {
                        removeEndsOnDateError();
                        validateModal(true, true);
                    });

                    $('#repeatingType').change(function (event) {
                        var selectedVal = $(this).children(':selected').prop('value');

                        removeRepeatsOnError();

                        if (selectedVal == 'Weekly') {
                            $('#weeklyRepeatsOn').prop('hidden', false);
                            $('#monthlyRepeatsOn').prop('hidden', true);
                        }
                        else if (selectedVal == 'Monthly') {
                            $('#weeklyRepeatsOn').prop('hidden', true);
                            $('#monthlyRepeatsOn').prop('hidden', false);
                        }
                        else {
                            $('#weeklyRepeatsOn').prop('hidden', true);
                            $('#monthlyRepeatsOn').prop('hidden', true);
                        }

                        validateModal(true, true);
                    });

                    $('#repeatsOnGroup').change(function (event) {
                        removeRepeatsOnError();
                        validateModal(true, true);
                    });

                    $('#modalOK').click(function (event) {
                        modalOKclick = true;
                        var result = validateModal(true, true);
                        if(!result.error)
                        {
                            $('#repeatText').children("strong").text(result.summary);
                            $('#RepeatSetup').modal('hide');
                            getLocation();
                        }
                    });

                    $('#modalCancel').click(function (event) {
                        modalCancelclick = true;
                        if (!editRepeat) {
                            $('#Repeat').prop('checked', false);
                            $("#repeatText").prop('hidden', true);
                        }
                        getLocation();
                    });

                    $('#RepeatSetup').on('shown.bs.modal', function (e) {
                        modalCancelclick = false;
                        modalOKclick = false;
                    })

                    $('#RepeatSetup').on('hidden.bs.modal', function (e) {
                        if (!modalCancelclick && !modalOKclick && !editRepeat) {
                            $('#Repeat').prop('checked', false);
                            $("#repeatText").prop('hidden', true);
                        }
                    })

                    $('#StartDate').change(function (event) {

                        getLocation();
                    });

                    $('#EndDate').change(function (event) {

                        getLocation();
                    });

                    $('#StartTime').change(function (event) {

                        getLocation();
                    });

                    $('#EndTime').change(function (event) {
                        getLocation();
                    });

            })
        });
    </script>
    
}

<style>
    .list-item-min-height {
        height: 40px;
        padding-top: 5px;
    }

    .form-control{
        height: 30px;
    }

    input {
        max-width: 270px;
    }

    textarea {
        max-width: 560px;
    }
</style>

<div class="container body-content">

    <div class="row">
        <div class="panel panel-primary" id="panel">
            <div class="panel-heading" id="heading">
                Meeting Information
            </div>
            @using (Html.BeginForm("ScheduleMeeting", "User", FormMethod.Post))
            {
            <div class="panel-body">
                <div class="col-md-12">
                    <ul class="list-group">
                        <li class="list-group-item list-item-min-height">
                            <div class="col-md-2" id="groupName">
                                Group Name:
                            </div>
                            <div class="col-md-10" id="groupNameValue">
                                @Html.DisplayTextFor(m => m.GroupName)
                                @Html.HiddenFor(m => m.GroupName)
                                @Html.HiddenFor(m => m.GroupID)
                            </div>
                        </li>
                        <li class="list-group-item list-item-min-height">
                            <div class="col-md-2">
                                Title (*):
                            </div>
                            <div class="col-md-10">
                                <div class="col-md-4" style="padding-left:0px">
                                    @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                                </div>
                                <div class="col-md-8">
                                    @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item list-item-min-height">
                            <div class="col-md-2">
                                Start Time (*):
                            </div>
                            <div class="col-md-10">
                                <div class="col-md-4" style="padding-left:0px; width:120px">
                                    @Html.TextBoxFor(m => m.StartDate, "", new { @class = "form-control", @placeholder = "YYYY-MM-DD" })
                                    @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4 input-group clockpicker" style="padding-left:0px; width:130px">
                                    <input type="text" class="form-control" id="StartTime">
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-time"></span>
                                    </span>
                                    
                                    @*@@Html.DropDownListFor(m => m.StartTime, new SelectList(HCI.Utils.Consts.MeetingTimeOptions, "Index", "Text"), new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.StartTime, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item list-item-min-height">
                            <div class="col-md-2">
                                End Time (*):
                            </div>
                            <div class="col-md-10">
                                <div class="col-md-2" style="padding-left:0px; width:120px">
                                    @Html.TextBoxFor(m => m.EndDate, "", new { @class = "form-control", @placeholder = "YYYY-MM-DD" })
                                    @Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 input-group clockpicker" style="padding-left:0px; width:130px">
                                    <input type="text" class="form-control" value="23:59" id="EndTime">
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-time"></span>
                                    </span>
                                    @*
            @Html.DropDownListFor(m => m.EndTime, new SelectList(HCI.Utils.Consts.MeetingTimeOptions, "Index", "Text"), new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.EndTime, "", new { @class = "text-danger" })
                                    *@
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item list-item-min-height">
                            <div class="col-md-2">
                                Repeat?
                            </div>
                            <div class="col-md-10">
                                <div class="col-md-1" style="width:20px">
                                    @Html.CheckBoxFor(m => m.Repeat, new { @class = "checkbox" })
                                    @Html.HiddenFor(m => m.NeverEnd)
                                    @Html.HiddenFor(m => m.OccurDays)
                                    @Html.HiddenFor(m => m.IntervalType)
                                    @Html.HiddenFor(m => m.EndDateForCycle)
                                </div>
                                <div class="col-md-6" id="repeatText" hidden>
                                    <strong></strong>
                                    <a href="javascript:void(0)" id="repeatEdit">Edit</a>
                                </div>
                            </div>
                        </li>

                        <li class="list-group-item list-item-min-height">
                            <div class="col-md-2">
                                Meeting Room (*):
                            </div>
                            <div class="col-md-10">
                                <select class="form-control col-md-5" style="padding-left:0px" data-val="true" data-val-required="The Location field is required." id="LocationID" name="LocationID"
                                        data-toggle="tooltip" data-placement="right" title="Only available rooms are shown in the list.">
                                    <option value="-1" selected>No Available Room</option>
                                    @*Just a placeholder here, the data will be populated by ajax*@
                                </select>
                                <a href="http://www.lib.ncsu.edu/reservearoom" target="_blank" data-toggle="tooltip" data-placement="right" title="You will go to NCSU Hunt libarary website">&nbsp;Check room availability in other days.</a>
                            </div>
                        </li>

                        <li class="list-group-item" style="height:90px;">
                            <div class="col-md-2">
                                Description:
                            </div>
                            <div class="col-md-10">
                                <div>
                                    @Html.TextAreaFor(m => m.Description, htmlAttributes: new { @class = "form-control", @rows = "3", @style = "padding-left:0px" })
                                </div>
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="col-md-12">
                    <div class="col-md-3">
                    </div>
                    <div class="col-md-9">
                        <button type="submit" class="col-md-2 col-md-push-2 btn btn-default">OK</button>
                        <div class="col-md-2 col-md-push-1">
                        </div><button type="button" class="col-md-2 col-md-push-1 btn btn-default">Cancel</button>
                    </div>

                </div>
            </div>
            }
            
    </div>
</div>
</div>

<!-- Modal -->
<div class="modal" style="top:30%" id="RepeatSetup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="modalTitle">Repeat</h4>
            </div>
            <div class="modal-body" id="modalBody" style="height:270px">
                <form>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-4">
                            Repeating Type (*):
                        </label>
                        <select class="form-control col-md-8" id="repeatingType" name="repeatingType"
                                style="max-width:255px;">
                            <option value="Daily">Daily</option>
                            <option value="Weekly" selected>Weekly</option>
                            <option value="Monthly">Monthly</option>
                        </select>
                    </div>
                    <div id="repeatsOnGroup">
                    <div class="form-group col-md-12" id="weeklyRepeatsOn">
                        <label class="control-label col-md-4">
                            Repeats on (*):
                        </label>
                        <div class="col-md-8" style="padding-left:0px;">
                            <div>
                            <span>
                                <input type="checkbox" id="sunCheck">
                                <label class="control-label">Sun</label>
                            </span>
                            <span>
                                <input type="checkbox" id="monCheck">
                                <label class="control-label">Mon</label>
                            </span>
                            <span>
                                <input type="checkbox" id="tueCheck">
                                <label class="control-label">Tue</label>
                            </span>
                            <span>
                                <input type="checkbox" id="wedCheck">
                                <label class="control-label">Wed</label>
                            </span>
                            <span>
                                <input type="checkbox" id="thuCheck">
                                <label class="control-label">Thu</label>
                            </span>
                            <span>
                                <input type="checkbox" id="friCheck">
                                <label class="control-label">Fri</label>
                            </span>
                            <span>
                                <input type="checkbox" id="satCheck">
                                <label class="control-label">Sat</label>
                            </span>
                            </div>
                            <div id="modalWeeklyRepeatsErrorMsg" class="text-danger"></div>
                        </div>
                        
                    </div>
                    <div class="form-group col-md-12" id="monthlyRepeatsOn" hidden>
                        <label class="control-label col-md-4">
                            Repeats on (*):
                        </label>
                        <div class="col-md-8" style="padding-left:0px">
                            <input class="form-control" id="monthlyRepeatsOnText"
                                   name="monthlyRepeatsOnText" type="text" value="" placeholder="01,02,03..." style="max-width:255px;">
                            <div id="modalMonthlyRepeatsErrorMsg" class="text-danger"></div>
                        </div>
                        
                    </div>
                    </div>
                    <div class="form-group col-md-12" id="startsOn">
                        <label class="control-label col-md-4">
                            Starts on:
                        </label>
                        <input class="form-control col-md-8" id="startsOnText" name="startsOnText" type="text" value="" disabled style="max-width:255px">
                    </div>

                    <div class="form-group col-md-12" id="endsOn">
                        <label class="control-label col-md-4">
                            Ends (*):
                        </label>
                        <div class="col-md-8">
                            <span class="col-md-12">
                                <input type="radio" id="endsOnNeverRadio" name="endsOnRadios" class="col-md-1 col-md-pull-1" checked>
                                <label class="control-label col-md-11 col-md-pull-1">Never</label>
                            </span>
                            <div class="col-md-12" id="endsOnDateGroup">
                                <input type="radio" id="endsOnDateRadio" name="endsOnRadios" class="col-md-1 col-md-pull-1">
                                <div>
                                    <label class="control-label col-md-3 col-md-pull-1">On</label>
                                    <input class="form-control col-md-9 col-md-pull-1" id="endsOnDateText" name="endsOnDateText" placeholder="YYYY-MM-DD" type="text" value="" style="max-width:150px" disabled>
                                    <div id="modalEndsOnErrorMsg" class="text-danger col-md-9 col-md-pull-1" style="padding-left:0px"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 text-success"><div id="modalSummary" class="col-md-12" style="word-wrap:break-word;text-align:left;"></div></div>
                </form>
            </div>
            <div class="modal-footer">
                <div class="col-md-12">
                    <div class="col-md-7">
                        
                    </div>
                    <div class="col-md-5">
                        <button type="button" id="modalOK" class="col-md-5 col-md-push-1 btn btn-default">OK</button>
                        <button type="button" id="modalCancel" class="col-md-5 col-md-push-1 btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

